#!/usr/bin/env python
import sys
import argparse
import pandas as pd
import numpy as np
import warnings


def parse_arguments(parser):
    """
    Parse parameters from the command line
    """

    parser.add_argument('--pred_file', type=str, metavar='FILE', default='', help='prediction file to be scaled')
    
    parser.add_argument('--scale_factor', type=float, metavar='FLOAT', default=None, help='scaling factor for producing mutation rates per base per generation. ')

    parser.add_argument('--out_file', type=str, metavar='FILE', default=None, help='output file with scaled rates. Default: pred_file_name.scaled.tsv.gz')
    
    if len(sys.argv) == 1:
        parser.parse_args(['--help'])
    else:
        args = parser.parse_args()

    return args

def main():
    
    #parse the command line
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
    description="""
    Scale MuRaL-predicted mutation rates into per-generation rates.
    """)
    args = parse_arguments(parser)
    
    pred_file = args.pred_file
    out_file = args.out_file
    
    if not out_file:
        out_file = pred_file+'.scaled.tsv.gz'
    
    scale_factor = args.scale_factor
    

    df = pd.read_table(pred_file, sep='\t', header=0)

    df['prob1'] = df['prob1'].astype(float) * scale_factor
    df['prob2'] = df['prob2'].astype(float) * scale_factor
    df['prob3'] = df['prob3'].astype(float) * scale_factor
    df['prob0'] = 1.0 - df['prob1'] - df['prob2'] - df['prob3']
    df.to_csv(out_file, sep='\t', float_format='%.4g', index=False)
    
  

if __name__ == '__main__':
    main()
